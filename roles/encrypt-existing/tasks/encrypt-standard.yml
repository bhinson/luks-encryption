---
  - name: Set device naming based on mount point
    set_fact:
      # Disk matching is based on mount point name
      src_mountpoint: "{{ search_key }}"

  - name: Set LUKS device name
    set_fact:
      # Use the last word of the mount point, with _luks added
      luks_name: "{{ src_mountpoint.split('/')[-1] }}_luks"

  - name: Check for existing filesystem encryption
    stat:
      path: /dev/mapper/{{ luks_name }}
    register: stat_out

  - name: Encrypt new partition and migrate existing data
    block:

    - name: Find pairs of same-sized disks
      include: match-disks.yml

    - name: Ensure directory is unmounted
      mount:
        path: "/mnt/encrypted/{{ luks_name }}"
        src: "/dev/mapper/{{ luks_name }}"
        state: unmounted

    - name: Create new encrypted partition
      include: encrypt-partition.yml

    - name: Get original filesystem type
      shell: lsblk -nfl {{ src_partition }}
      register: lsblk_out
      # Don't report changed since this is a read-only command
      changed_when: false

    - name: Parse filesystem type
      set_fact:
        # filesystem type is second field of output
        fstype: "{{ lsblk_out.stdout.split()[1] }}"

    - name: Create filesystem on encrypted device
      filesystem:
        dev: "/dev/mapper/{{ luks_name }}"
        fstype: "{{ fstype }}"
        resizefs: no

    - name: Update fstab for persistent mount at reboot
      mount:
        path: "{{ src_mountpoint }}"
        src: "/dev/mapper/{{ luks_name }}"
        fstype: "{{ fstype }}"
        # Set _netdev option for NBDE integration
        opts: _netdev
        # Don't actually mount, just update fstab
        state: present

    - name: Mount new encrypted filesystem
      mount:
        path: "/mnt/encrypted/{{ luks_name }}"
        src: "/dev/mapper/{{ luks_name }}"
        fstype: "{{ fstype }}"
        state: mounted
        # Temporary mount, don't update fstab yet
        fstab: /tmp/fstab

    - name: Copy from unencrypted to encrypted filesystem
      shell: rsync -axXHAS --delete {{ src_mountpoint }} /mnt/encrypted/{{ luks_name }}

    - name: Unmount encrypted filesystem
      mount:
        path: "/mnt/encrypted/{{ luks_name }}"
        src: "/dev/mapper/{{ luks_name }}"
        state: unmounted

    - name: Set reboot required
      set_fact:
        reboot_required: true

    # Conditional block, run when existing LUKS device is not already present
    when: stat_out.stat.exists == false
